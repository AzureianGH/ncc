; 8086 Assembly generated by NCC Compiler
bits 16
org 0x8000

; Function: _after_diskload
__after_diskload:
    push bp
    mov bp, sp

    ; Function call to clearScreen
    call _clearScreen
    ; Function call to enterVGAGraphicsMode
    call _enterVGAGraphicsMode
    ; Function call to clearGraphics
    mov ax, 1 ; Load literal
    push ax ; Argument 1
    call _clearGraphics
    add sp, 2 ; Remove arguments
    ; Function call to haltForever
    call _haltForever

__after_diskload_exit:
    ; Standard function epilogue
    mov sp, bp
    pop bp
    ret

; Function: assert
_assert:
    push bp
    mov bp, sp

    ; If statement
    mov ax, [bp+4] ; Load parameter condition
    test ax, ax ; Test if AX is zero
    setz al ; Set AL to 1 if AX is zero, 0 otherwise
    movzx ax, al ; Zero-extend AL to AX
    test ax, ax
    jz if_end1
    ; If true branch
    ; Function call to writeString
    ; String literal: Assertion failed!\r\n
    mov ax, kernel_string_0 ; Address of string
    push ax ; Argument 1
    call _writeString
    add sp, 2 ; Remove arguments
    ; Function call to haltForever
    call _haltForever
if_end1:

_assert_exit:
    ; Standard function epilogue
    mov sp, bp
    pop bp
    ret

; Function: clearScreen
_clearScreen:
    push bp
    mov bp, sp

    ; Inline assembly statement
    mov ax, 0x0003
    ; Inline assembly statement
    int 0x10

_clearScreen_exit:
    ; Standard function epilogue
    mov sp, bp
    pop bp
    ret

; Function: haltForever
_haltForever:
    ; Naked function - no prologue generated
    ; Inline assembly statement
    cli
    ; Inline assembly statement
    hlt
    ; Inline assembly statement
    jmp _haltForever

_haltForever_exit:
    ; Naked function - no epilogue generated

; Function: writeChar
_writeChar:
    push bp
    mov bp, sp

    ; Inline assembly statement
    mov al, [bp+4]
    ; Inline assembly statement
    mov ah, 0x0E
    ; Inline assembly statement
    mov bx, 0x0007
    ; Inline assembly statement
    int 0x10

_writeChar_exit:
    ; Standard function epilogue
    mov sp, bp
    pop bp
    ret

; Function: writeString
_writeString:
    push bp
    mov bp, sp

    ; While loop
while_cond2:
    mov ax, [bp+4] ; Load parameter str
    ; Dereferencing pointer
    mov bx, ax ; Move pointer address to BX
    cmp bx, 0 ; Check for null pointer
    je null_ptr_deref_5
    xor ah, ah ; Clear high byte for char
    mov al, [bx] ; Load byte (char) from memory
    jmp ptr_deref_end_5
null_ptr_deref_5:
    ; Null pointer dereference detected
    mov ax, 0 ; Return 0 for null deref
ptr_deref_end_5:
    test ax, ax
    jz while_end4
while_body3:
    ; Loop body
    ; Function call to writeChar
    ; Postfix increment of parameter str
    mov ax, [bp+4] ; Load parameter value
    mov bx, ax ; Save original value to BX
    inc bx ; Increment value
    mov [bp+4], bx ; Store incremented value back
    ; Dereferencing pointer
    mov bx, ax ; Move address to BX
    cmp bx, 0 ; Check for null pointer
    je null_ptr_deref_6
    mov ax, [bx] ; Load word from memory
    jmp ptr_deref_end_6
null_ptr_deref_6:
    ; Null pointer dereference detected
    mov ax, 0 ; Return 0 for null deref
ptr_deref_end_6:
    push ax ; Argument 1
    call _writeChar
    add sp, 2 ; Remove arguments
    jmp while_cond2
while_end4:

_writeString_exit:
    ; Standard function epilogue
    mov sp, bp
    pop bp
    ret

; Function: enterVGAGraphicsMode
_enterVGAGraphicsMode:
    push bp
    mov bp, sp

    ; Inline assembly statement
    mov ax, 0x0013
    ; Inline assembly statement
    int 0x10

_enterVGAGraphicsMode_exit:
    ; Standard function epilogue
    mov sp, bp
    pop bp
    ret

; Function: clearGraphics
_clearGraphics:
    push bp
    mov bp, sp

    ; Inline assembly statement
    mov ax, 0xA000
    ; Inline assembly statement
    mov es, ax
    ; Inline assembly statement
    xor di, di
    ; Inline assembly statement
    ; Inline assembly with 1 operands
    mov ax, [bp+4] ; Load parameter color
    mov cx, byte ax
    ; Inline assembly statement
    mov ax, cx
    ; Inline assembly statement
    mov cx, 64000
    ; Inline assembly statement
    rep stosb

_clearGraphics_exit:
    ; Standard function epilogue
    mov sp, bp
    pop bp
    ret


; Data section for strings and arrays
; String literals section
kernel_string_0: db 65, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 33, 13, 10, 0  ; null terminator
